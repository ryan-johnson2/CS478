Context Free Grammar

comment    - //.*\n
identifier - [a-zA-Z](_?[a-zA-Z\d])*
string literal - "[^"]*"
numeric literal - [1-9][0-9]* | 0
boolean literal - true | false

Keywords - if, else, for, while, int, string, boolean, 
           return, match, case, array, true, false, void
           
Symbols - =, <=, >=, (, ), {, }, [, ], ;, *, +, -, /
          ", ', `, <, >, .., %, **, ==, !=, +=, -=, 
          *=, /=, \,
  
<lit> =  string literal | numeric literal | boolean literal

<type> = int | string | boolean
  
<expr> = <lit> 
       | <identifier>
       | <identifier> '(' (<expr7> (',' <expr7>)*)? ')'
       | '(' <expr7> ')'
        
<expr0> = <expr> ('**' <expr>)*

<expr1> = '-' <expr0> 

<expr2> = <expr1> ('*' <expr1> | '/' <expr1> | '%' <expr1>)*

<expr3> = <expr2> ('+' <expr2> | '-' <expr2>)*

<expr4> = 'not' <expr3> 

<expr5> = <expr> '<' <expr> // No recursion to fix; also 
        | <expr> '>' <expr> // necessitates parentheses for
        | <expr> '<=' <expr> // 'arguments' of comparators
        | <expr> '>=' <expr>
        | <expr> '==' <expr>
        | <expr> '!=' <expr>
        | <expr4>

<expr6> = <expr5> ('and' <expr5>)*

<expr7> = <expr6> ('or' <expr6>)*
          
<stmt> = <expr> ';'
       | <identifier> ( '=' | '+=' | '-=' | '\=' | '*=' ) <expr> ';'
       | return <expr> ';'
       | while '(' <expr> ')' <body>
       | for '(' <declar> ; <expr> ';' <stmt> ')' <body>
       | if '(' <expr> ')' <body> ( elif '(' <expr> ')' <body> )* ( else <body> )?

<declar> = type <identifier> '=' <expr> ';'
         | type <identifier> '('( <identifier> ':' type (',' <identifier> ':' type )* )? ')' <body>

<body> = '{' ( <stmt> | <declar> )* '}'

